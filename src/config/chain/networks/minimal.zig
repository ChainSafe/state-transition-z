const std = @import("std");
const hex_utils = @import("hex");
const Preset = @import("params").Preset;
const ChainConfig = @import("../chain_config.zig").ChainConfig;
const BlobScheduleEntry = @import("../chain_config.zig").BlobScheduleEntry;
const b = hex_utils.hexToBytesComptime;

pub const minimal_chain_config = ChainConfig{
    .PRESET_BASE = Preset.minimal,
    .CONFIG_NAME = "minimal",

    .TERMINAL_TOTAL_DIFFICULTY = 115792089237316195423570985008687907853269984665640564039457584007913129638912,
    .TERMINAL_BLOCK_HASH = b(32, "0x0000000000000000000000000000000000000000000000000000000000000000"),
    .TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH = std.math.maxInt(u64),

    // Genesis
    .MIN_GENESIS_ACTIVE_VALIDATOR_COUNT = 64,
    .MIN_GENESIS_TIME = 1578009600,
    .GENESIS_FORK_VERSION = b(4, "0x00000001"),
    .GENESIS_DELAY = 300,

    // Forking
    .ALTAIR_FORK_VERSION = b(4, "0x01000001"),
    .ALTAIR_FORK_EPOCH = 74240,
    .BELLATRIX_FORK_VERSION = b(4, "0x02000001"),
    .BELLATRIX_FORK_EPOCH = std.math.maxInt(u64),
    .CAPELLA_FORK_VERSION = b(4, "0x03000001"),
    .CAPELLA_FORK_EPOCH = std.math.maxInt(u64),
    .DENEB_FORK_VERSION = b(4, "0x04000001"),
    .DENEB_FORK_EPOCH = std.math.maxInt(u64),
    .ELECTRA_FORK_VERSION = b(4, "0x05000001"),
    .ELECTRA_FORK_EPOCH = std.math.maxInt(u64),
    .FULU_FORK_VERSION = b(4, "0x06000001"),
    .FULU_FORK_EPOCH = std.math.maxInt(u64),

    // Time parameters
    .SECONDS_PER_SLOT = 6,
    .SECONDS_PER_ETH1_BLOCK = 14,
    .MIN_VALIDATOR_WITHDRAWABILITY_DELAY = 256,
    .SHARD_COMMITTEE_PERIOD = 64,
    .ETH1_FOLLOW_DISTANCE = 16,

    // Validator cycle
    .INACTIVITY_SCORE_BIAS = 4,
    .INACTIVITY_SCORE_RECOVERY_RATE = 16,
    .EJECTION_BALANCE = 16000000000,
    .MIN_PER_EPOCH_CHURN_LIMIT = 2,
    .MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT = 4,
    .CHURN_LIMIT_QUOTIENT = 32,

    // Fork choice
    .PROPOSER_SCORE_BOOST = 40,
    .REORG_HEAD_WEIGHT_THRESHOLD = 20,
    .REORG_PARENT_WEIGHT_THRESHOLD = 160,
    .REORG_MAX_EPOCHS_SINCE_FINALIZATION = 2,

    // Deposit contract
    .DEPOSIT_CHAIN_ID = 5,
    .DEPOSIT_NETWORK_ID = 5,
    .DEPOSIT_CONTRACT_ADDRESS = b(20, "0x1234567890123456789012345678901234567890"),

    // Networking
    .MIN_EPOCHS_FOR_BLOCK_REQUESTS = 272,

    // Deneb
    .MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS = 4096,
    .BLOB_SIDECAR_SUBNET_COUNT = 6,
    .MAX_BLOBS_PER_BLOCK = 6,
    .MAX_REQUEST_BLOB_SIDECARS = 768,

    // Electra
    .MAX_PER_EPOCH_ACTIVATION_EXIT_CHURN_LIMIT = 128000000000,
    .MIN_PER_EPOCH_CHURN_LIMIT_ELECTRA = 64000000000,
    .BLOB_SIDECAR_SUBNET_COUNT_ELECTRA = 9,
    .MAX_BLOBS_PER_BLOCK_ELECTRA = 9,
    .MAX_REQUEST_BLOB_SIDECARS_ELECTRA = 1152,

    // Fulu
    .MIN_EPOCHS_FOR_DATA_COLUMN_SIDECARS_REQUESTS = 4096,
    .SAMPLES_PER_SLOT = 8,
    .CUSTODY_REQUIREMENT = 4,
    .NODE_CUSTODY_REQUIREMENT = 1,
    .VALIDATOR_CUSTODY_REQUIREMENT = 8,
    .BALANCE_PER_ADDITIONAL_CUSTODY_GROUP = 32000000000,

    // Blob Scheduling
    .BLOB_SCHEDULE = &[_]BlobScheduleEntry{},
};
