const std = @import("std");
const hex_utils = @import("hex");
const Preset = @import("params").Preset;
const ChainConfig = @import("../chain_config.zig").ChainConfig;
const BlobScheduleEntry = @import("../chain_config.zig").BlobScheduleEntry;
const b = hex_utils.hexToBytesComptime;

const gnosis = @import("./gnosis.zig").gnosis_chain_config;

pub const chiado_chain_config = ChainConfig{
    .PRESET_BASE = Preset.gnosis,
    .CONFIG_NAME = "chiado",

    // Transition
    .TERMINAL_TOTAL_DIFFICULTY = 231707791542740786049188744689299064356246512,
    .TERMINAL_BLOCK_HASH = gnosis.TERMINAL_BLOCK_HASH,
    .TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH = gnosis.TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH,

    // Genesis
    .MIN_GENESIS_ACTIVE_VALIDATOR_COUNT = 6000,
    .MIN_GENESIS_TIME = 1665396000,
    .GENESIS_FORK_VERSION = b(4, "0x0000006f"),
    .GENESIS_DELAY = 300,

    // Forking
    // Altair
    .ALTAIR_FORK_VERSION = b(4, "0x0100006f"),
    .ALTAIR_FORK_EPOCH = 90,
    // Bellatrix
    .BELLATRIX_FORK_VERSION = b(4, "0x0200006f"),
    .BELLATRIX_FORK_EPOCH = 180,
    // Capella
    .CAPELLA_FORK_VERSION = b(4, "0x0300006f"),
    .CAPELLA_FORK_EPOCH = 244224,
    // Deneb
    .DENEB_FORK_VERSION = b(4, "0x0400006f"),
    .DENEB_FORK_EPOCH = 516608,
    // Electra
    .ELECTRA_FORK_VERSION = b(4, "0x0500006f"),
    .ELECTRA_FORK_EPOCH = 948224,
    // Fulu
    .FULU_FORK_VERSION = b(4, "0x0600006f"),
    .FULU_FORK_EPOCH = std.math.maxInt(u64),

    // Time parameters
    .SECONDS_PER_SLOT = gnosis.SECONDS_PER_SLOT,
    .SECONDS_PER_ETH1_BLOCK = gnosis.SECONDS_PER_ETH1_BLOCK,
    .MIN_VALIDATOR_WITHDRAWABILITY_DELAY = gnosis.MIN_VALIDATOR_WITHDRAWABILITY_DELAY,
    .SHARD_COMMITTEE_PERIOD = gnosis.SHARD_COMMITTEE_PERIOD,
    .ETH1_FOLLOW_DISTANCE = gnosis.ETH1_FOLLOW_DISTANCE,

    // Validator cycle
    .INACTIVITY_SCORE_BIAS = gnosis.INACTIVITY_SCORE_BIAS,
    .INACTIVITY_SCORE_RECOVERY_RATE = gnosis.INACTIVITY_SCORE_RECOVERY_RATE,
    .EJECTION_BALANCE = gnosis.EJECTION_BALANCE,
    .MIN_PER_EPOCH_CHURN_LIMIT = gnosis.MIN_PER_EPOCH_CHURN_LIMIT,
    .MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT = gnosis.MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT,
    .CHURN_LIMIT_QUOTIENT = gnosis.CHURN_LIMIT_QUOTIENT,
    .MAX_PER_EPOCH_ACTIVATION_EXIT_CHURN_LIMIT = gnosis.MAX_PER_EPOCH_ACTIVATION_EXIT_CHURN_LIMIT,
    .MIN_PER_EPOCH_CHURN_LIMIT_ELECTRA = gnosis.MIN_PER_EPOCH_CHURN_LIMIT_ELECTRA,

    // Fork choice
    .PROPOSER_SCORE_BOOST = gnosis.PROPOSER_SCORE_BOOST,
    .REORG_HEAD_WEIGHT_THRESHOLD = gnosis.REORG_HEAD_WEIGHT_THRESHOLD,
    .REORG_PARENT_WEIGHT_THRESHOLD = gnosis.REORG_PARENT_WEIGHT_THRESHOLD,
    .REORG_MAX_EPOCHS_SINCE_FINALIZATION = gnosis.REORG_MAX_EPOCHS_SINCE_FINALIZATION,

    // Deposit contract
    .DEPOSIT_CHAIN_ID = 10200,
    .DEPOSIT_NETWORK_ID = 10200,
    .DEPOSIT_CONTRACT_ADDRESS = b(20, "0xb97036A26259B7147018913bD58a774cf91acf25"),

    // Networking
    .MIN_EPOCHS_FOR_BLOCK_REQUESTS = gnosis.MIN_EPOCHS_FOR_BLOCK_REQUESTS,
    .MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS = gnosis.MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS,
    .MIN_EPOCHS_FOR_DATA_COLUMN_SIDECARS_REQUESTS = gnosis.MIN_EPOCHS_FOR_DATA_COLUMN_SIDECARS_REQUESTS,
    .BLOB_SIDECAR_SUBNET_COUNT = gnosis.BLOB_SIDECAR_SUBNET_COUNT,
    .MAX_BLOBS_PER_BLOCK = gnosis.MAX_BLOBS_PER_BLOCK,
    .MAX_REQUEST_BLOB_SIDECARS = gnosis.MAX_REQUEST_BLOB_SIDECARS,
    .BLOB_SIDECAR_SUBNET_COUNT_ELECTRA = gnosis.BLOB_SIDECAR_SUBNET_COUNT_ELECTRA,
    .MAX_BLOBS_PER_BLOCK_ELECTRA = gnosis.MAX_BLOBS_PER_BLOCK_ELECTRA,
    .MAX_REQUEST_BLOB_SIDECARS_ELECTRA = gnosis.MAX_REQUEST_BLOB_SIDECARS_ELECTRA,

    .SAMPLES_PER_SLOT = gnosis.SAMPLES_PER_SLOT,
    .CUSTODY_REQUIREMENT = gnosis.CUSTODY_REQUIREMENT,
    .NODE_CUSTODY_REQUIREMENT = gnosis.NODE_CUSTODY_REQUIREMENT,
    .VALIDATOR_CUSTODY_REQUIREMENT = gnosis.VALIDATOR_CUSTODY_REQUIREMENT,
    .BALANCE_PER_ADDITIONAL_CUSTODY_GROUP = gnosis.BALANCE_PER_ADDITIONAL_CUSTODY_GROUP,

    // Blob Scheduling
    .BLOB_SCHEDULE = gnosis.BLOB_SCHEDULE,
};
