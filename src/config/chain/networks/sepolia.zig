const std = @import("std");
const preset = @import("preset").preset;
const ChainConfig = @import("../chain_config.zig").ChainConfig;
const BlobScheduleEntry = @import("../chain_config.zig").BlobScheduleEntry;
const b = @import("../../root.zig").hexToBytesComptime;

const mainnet = @import("./mainnet.zig").mainnet_chain_config;

// all values are placeholders with mainnet and need to be filled in with actual values
pub const sepolia_chain_config = ChainConfig{
    .PRESET_BASE = mainnet.PRESET_BASE,
    .CONFIG_NAME = "sepolia",

    // Transition
    .TERMINAL_TOTAL_DIFFICULTY = 17000000000000000,
    .TERMINAL_BLOCK_HASH = mainnet.TERMINAL_BLOCK_HASH,
    .TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH = mainnet.TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH,

    // Genesis
    .MIN_GENESIS_ACTIVE_VALIDATOR_COUNT = 1300,
    .MIN_GENESIS_TIME = 1655647200,
    .GENESIS_FORK_VERSION = b(4, "0x90000069"),
    .GENESIS_DELAY = 86400,

    // Forking
    // Atair
    .ALTAIR_FORK_VERSION = b(4, "0x90000070"),
    .ALTAIR_FORK_EPOCH = 50,
    // Bellatrix
    .BELLATRIX_FORK_VERSION = b(4, "0x90000071"),
    .BELLATRIX_FORK_EPOCH = 100,
    // Capella
    .CAPELLA_FORK_VERSION = b(4, "0x90000072"),
    .CAPELLA_FORK_EPOCH = 56832,
    // Deneb
    .DENEB_FORK_VERSION = b(4, "0x90000073"),
    .DENEB_FORK_EPOCH = 132608,
    // Electra
    .ELECTRA_FORK_VERSION = b(4, "0x90000074"),
    .ELECTRA_FORK_EPOCH = 222464,
    // Fulu
    .FULU_FORK_VERSION = b(4, "0x90000075"),
    .FULU_FORK_EPOCH = std.math.maxInt(u64),

    // Time parameters
    .SECONDS_PER_SLOT = mainnet.SECONDS_PER_SLOT,
    .SECONDS_PER_ETH1_BLOCK = mainnet.SECONDS_PER_ETH1_BLOCK,
    .MIN_VALIDATOR_WITHDRAWABILITY_DELAY = mainnet.MIN_VALIDATOR_WITHDRAWABILITY_DELAY,
    .SHARD_COMMITTEE_PERIOD = mainnet.SHARD_COMMITTEE_PERIOD,
    .ETH1_FOLLOW_DISTANCE = mainnet.ETH1_FOLLOW_DISTANCE,

    // Validator cycle
    .INACTIVITY_SCORE_BIAS = mainnet.INACTIVITY_SCORE_BIAS,
    .INACTIVITY_SCORE_RECOVERY_RATE = mainnet.INACTIVITY_SCORE_RECOVERY_RATE,
    .EJECTION_BALANCE = mainnet.EJECTION_BALANCE,
    .MIN_PER_EPOCH_CHURN_LIMIT = mainnet.MIN_PER_EPOCH_CHURN_LIMIT,
    .MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT = mainnet.MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT,
    .CHURN_LIMIT_QUOTIENT = mainnet.CHURN_LIMIT_QUOTIENT,
    .MAX_PER_EPOCH_ACTIVATION_EXIT_CHURN_LIMIT = mainnet.MAX_PER_EPOCH_ACTIVATION_EXIT_CHURN_LIMIT,
    .MIN_PER_EPOCH_CHURN_LIMIT_ELECTRA = mainnet.MIN_PER_EPOCH_CHURN_LIMIT_ELECTRA,

    // Fork choice
    .PROPOSER_SCORE_BOOST = mainnet.PROPOSER_SCORE_BOOST,
    .REORG_HEAD_WEIGHT_THRESHOLD = mainnet.REORG_HEAD_WEIGHT_THRESHOLD,
    .REORG_PARENT_WEIGHT_THRESHOLD = mainnet.REORG_PARENT_WEIGHT_THRESHOLD,
    .REORG_MAX_EPOCHS_SINCE_FINALIZATION = mainnet.REORG_MAX_EPOCHS_SINCE_FINALIZATION,

    // Deposit contract
    .DEPOSIT_CHAIN_ID = 11155111,
    .DEPOSIT_NETWORK_ID = 11155111,
    .DEPOSIT_CONTRACT_ADDRESS = b(20, "0x7f02C3E3c98b133055B8B348B2Ac625669Ed295D"),

    // Networking
    .MIN_EPOCHS_FOR_BLOCK_REQUESTS = mainnet.MIN_EPOCHS_FOR_BLOCK_REQUESTS,
    .MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS = mainnet.MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS,
    .BLOB_SIDECAR_SUBNET_COUNT = mainnet.BLOB_SIDECAR_SUBNET_COUNT,
    .MAX_BLOBS_PER_BLOCK = mainnet.MAX_BLOBS_PER_BLOCK,
    .MAX_REQUEST_BLOB_SIDECARS = mainnet.MAX_REQUEST_BLOB_SIDECARS,
    .BLOB_SIDECAR_SUBNET_COUNT_ELECTRA = mainnet.BLOB_SIDECAR_SUBNET_COUNT_ELECTRA,
    .MAX_BLOBS_PER_BLOCK_ELECTRA = mainnet.MAX_BLOBS_PER_BLOCK_ELECTRA,
    .MAX_REQUEST_BLOB_SIDECARS_ELECTRA = mainnet.MAX_REQUEST_BLOB_SIDECARS_ELECTRA,
    .MIN_EPOCHS_FOR_DATA_COLUMN_SIDECARS_REQUESTS = mainnet.MIN_EPOCHS_FOR_DATA_COLUMN_SIDECARS_REQUESTS,

    .SAMPLES_PER_SLOT = mainnet.SAMPLES_PER_SLOT,
    .CUSTODY_REQUIREMENT = mainnet.CUSTODY_REQUIREMENT,
    .NODE_CUSTODY_REQUIREMENT = mainnet.NODE_CUSTODY_REQUIREMENT,
    .VALIDATOR_CUSTODY_REQUIREMENT = mainnet.VALIDATOR_CUSTODY_REQUIREMENT,
    .BALANCE_PER_ADDITIONAL_CUSTODY_GROUP = mainnet.BALANCE_PER_ADDITIONAL_CUSTODY_GROUP,

    // Blob Scheduling
    .BLOB_SCHEDULE = &[_]BlobScheduleEntry{},
};
