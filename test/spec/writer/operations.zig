const std = @import("std");
const spec_test_options = @import("spec_test_options");
const ForkSeq = @import("config").ForkSeq;
const Preset = @import("preset").Preset;
const Operation = @import("../test_type/operations.zig").Operation;

pub const header =
    \\// This file is generated by write_spec_tests.zig.
    \\// Do not commit changes by hand.
    \\
    \\const std = @import("std");
    \\const ForkSeq = @import("config").ForkSeq;
    \\const preset = @import("preset").preset.preset;
    \\const spec_test_options = @import("spec_test_options");
    \\const Operation = @import("../test_type/operations.zig").Operation;
    \\
    \\const allocator = std.heap.page_allocator;
    \\
    \\
;

const test_template =
    \\test "{s} {s} {s}" {{
    \\    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{{
    \\        spec_test_options.spec_test_out_dir,
    \\        spec_test_options.spec_test_version,
    \\        @tagName(preset) ++ "/tests/" ++ @tagName(preset) ++ "/{s}/operations/{s}/pyspec_tests/{s}",
    \\    }});
    \\    defer allocator.free(test_dir_name);
    \\
    \\    const test_dir = std.fs.cwd().openDir(test_dir_name, .{{}}) catch return error.SkipZigTest;
    \\    var tc = try Operation.TestCase(.{s}, .{s}, {}).init(allocator, test_dir);
    \\    defer tc.deinit();
    \\
    \\    try tc.runTest();
    \\}}
    \\
    \\
;

pub fn writeOperationsTests(comptime forks: []const ForkSeq, writer: std.io.AnyWriter) !void {
    try writer.print(header, .{});

    // minimal preset includes many more testcases and is a superset of mainnet testcases
    const preset = Preset.minimal;

    const operations = comptime std.enums.values(Operation);

    var root_dir = try std.fs.cwd().openDir(spec_test_options.spec_test_out_dir ++ "/" ++ spec_test_options.spec_test_version, .{});
    defer root_dir.close();

    var preset_dir = try root_dir.openDir(@tagName(preset) ++ "/tests/" ++ @tagName(preset), .{});
    defer preset_dir.close();

    inline for (forks) |fork| {
        var fork_dir = try preset_dir.openDir(@tagName(fork) ++ "/operations", .{});
        defer fork_dir.close();

        inline for (operations) |operation| {
            op: {
                var operation_dir = fork_dir.openDir(@tagName(operation) ++ "/pyspec_tests", .{ .iterate = true }) catch break :op;
                defer operation_dir.close();

                var test_case_iterator = operation_dir.iterate();
                while (try test_case_iterator.next()) |test_case_entry| {
                    switch (test_case_entry.kind) {
                        .directory => {},
                        else => {
                            continue;
                        },
                    }
                    const test_case_name = test_case_entry.name;

                    try writeOperationsTest(writer, fork, operation, test_case_name);
                }
            }
        }
    }
}

fn writeOperationsTest(writer: std.io.AnyWriter, fork: ForkSeq, operation: Operation, test_case_name: []const u8) !void {
    const valid = !std.mem.startsWith(u8, test_case_name, "invalid");
    try writer.print(test_template, .{
        @tagName(fork),
        @tagName(operation),
        test_case_name,

        @tagName(fork),
        @tagName(operation),
        test_case_name,

        @tagName(fork),
        @tagName(operation),
        valid,
    });
}
