const std = @import("std");
const spec_test_options = @import("spec_test_options");
const ForkSeq = @import("config").ForkSeq;
const Preset = @import("preset").Preset;
const Handler = @import("../runner/Operations.zig").Handler;

pub const handlers = std.enums.values(Handler);

pub const header =
    \\// This file is generated by write_spec_tests.zig.
    \\// Do not commit changes by hand.
    \\
    \\const std = @import("std");
    \\const ForkSeq = @import("config").ForkSeq;
    \\const active_preset = @import("preset").active_preset;
    \\const spec_test_options = @import("spec_test_options");
    \\const Operations = @import("../runner/Operations.zig");
    \\
    \\const allocator = std.testing.allocator;
    \\
    \\
;

const test_template =
    \\test "{s} operations {s} {s}" {{
    \\    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{{
    \\        spec_test_options.spec_test_out_dir,
    \\        spec_test_options.spec_test_version,
    \\        @tagName(active_preset) ++ "/tests/" ++ @tagName(active_preset) ++ "/{s}/operations/{s}/pyspec_tests/{s}",
    \\    }});
    \\    defer allocator.free(test_dir_name);
    \\    const test_dir = std.fs.cwd().openDir(test_dir_name, .{{}}) catch return error.SkipZigTest;
    \\
    \\    try Operations.TestCase(.{s}, .{s}).execute(allocator, test_dir);
    \\}}
    \\
    \\
;

pub fn writeHeader(writer: std.io.AnyWriter) !void {
    try writer.print(header, .{});
}

pub fn writeTest(
    writer: std.io.AnyWriter,
    fork: ForkSeq,
    handler: Handler,
    test_case_name: []const u8,
) !void {
    try writer.print(test_template, .{
        @tagName(fork),
        @tagName(handler),
        test_case_name,

        @tagName(fork),
        @tagName(handler),
        test_case_name,

        @tagName(fork),
        @tagName(handler),
    });
}
