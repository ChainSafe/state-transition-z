name: Build and Test Zig and Bun

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  zig-build-upload:
    strategy:
      matrix:
        settings:
          - os: ubuntu-latest
            target: x86_64-linux-gnu
          - os: ubuntu-latest
            target: x86_64-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-linux-musl
          - os: macos-13
            target: x86_64-macos-none
          - os: macos-latest
            target: aarch64-macos-none

    runs-on: ${{ matrix.settings.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive # Ensures submodules are cloned
          fetch-depth: 0        # Fetches the entire history for all branches
      - name: Install Zig
        uses: mlugg/setup-zig@v1
        with:
          version: "0.14.0" # Set the required Zig version
      - name: Build and Test
        run: |
          zig build test
      - name: Build binary
        run: zig build -Dtarget=${{ matrix.settings.target }} -Doptimize=ReleaseSafe
      - name: Check binary
        run: |
          ls -la zig-out/lib
      - name: Upload Zig Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: 'zig-out/lib/libstate-transition-utils.*'
          if-no-files-found: error

  bun-benchmark:
    name: run benchmark on ubuntu-latest x86_64
    needs: zig-build-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4 # no need zig installation, download artifacts from previous job instead
        with:
          name: bindings-x86_64-linux-gnu
          path: zig-out/lib
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
          # Append Bun's bin folder to the GitHub Actions PATH.
          echo "$HOME/.bun/bin" >> $GITHUB_PATH
          bun --version
      - name: Bun - Install Dependencies
        run: bun install
        working-directory: ./bun
      - name: Bun - Lint Code
        run: bun lint
        working-directory: ./bun
      - name: Bun - Unit Tests
        run: bun test:unit
        working-directory: ./bun
      - name: Benchmark
        run: bun benchmark
        working-directory: ./bun
        env:
          # To write to PRs and commits
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bun-linux-x64-gnu:
    name: Test bindings on linux-x64-gnu
    needs: zig-build-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4 # no need zig installation, download artifacts from previous job instead
        with:
          name: bindings-x86_64-linux-gnu
          path: zig-out/lib
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
          # Append Bun's bin folder to the GitHub Actions PATH.
          echo "$HOME/.bun/bin" >> $GITHUB_PATH
          bun --version
      - name: Bun - Install Dependencies
        run: bun install
        working-directory: ./bun
      - name: Bun - Lint Code
        run: bun lint
        working-directory: ./bun
      - name: Bun - Unit Tests
        run: bun test:unit
        working-directory: ./bun

  bun-linux-arm64-gnu:
    name: Test bindings on linux-arm64-gnu
    needs: zig-build-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4 # no need zig installation, download artifacts from previous job instead
        with:
          name: bindings-aarch64-linux-gnu
          path: zig-out/lib # download to the same folder of "zig build -Doptimize=ReleaseSafe"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests using Bun
        uses: addnab/docker-run-action@v3
        with:
          image: oven/bun:1.2.13
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/project -w /project/bun'
          run: |
            bun install
            bun test:unit

  bun-linux-x64-musl:
    name: Test bindings on linux-x64-musl
    needs: zig-build-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4 # no need zig installation, download artifacts from previous job instead
        with:
          name: bindings-x86_64-linux-musl
          path: zig-out/lib # download to the same folder of "zig build -Doptimize=ReleaseSafe"
      - name: Setup and run tests using Bun
        uses: addnab/docker-run-action@v3
        with:
          image: oven/bun:1.2.13-alpine
          options: '-v ${{ github.workspace }}:/project -w /project/bun'
          run: | # cannot run committeeIndices.test.ts and shuffle.test.ts due to musl is not available: @chainsafe/pubkey-index-map-linux-x64-musl
            bun install
            bun test test/unit/pubkeyIndexMap.test.ts
