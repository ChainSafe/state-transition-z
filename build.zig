// This file is generated by zbuild. Do not edit manually.

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const dep_snappy = b.dependency("snappy", .{});

    const dep_ssz = b.dependency("ssz", .{});

    const dep_blst_z = b.dependency("blst_z", .{});

    const options_build_options = b.addOptions();
    const option_preset = b.option([]const u8, "preset", "") orelse "mainnet";
    options_build_options.addOption([]const u8, "preset", option_preset);
    const options_module_build_options = options_build_options.createModule();

    const options_spec_test_options = b.addOptions();
    const option_spec_test_url = b.option([]const u8, "spec_test_url", "") orelse "https://github.com/ethereum/consensus-spec-tests";
    options_spec_test_options.addOption([]const u8, "spec_test_url", option_spec_test_url);
    const option_spec_test_version = b.option([]const u8, "spec_test_version", "") orelse "v1.5.0";
    options_spec_test_options.addOption([]const u8, "spec_test_version", option_spec_test_version);
    const option_spec_test_out_dir = b.option([]const u8, "spec_test_out_dir", "") orelse "test/spec/spec_tests";
    options_spec_test_options.addOption([]const u8, "spec_test_out_dir", option_spec_test_out_dir);
    const options_module_spec_test_options = options_spec_test_options.createModule();

    const module_hex = b.createModule(.{
        .root_source_file = b.path("src/hex.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("hex"), module_hex) catch @panic("OOM");

    const module_config = b.createModule(.{
        .root_source_file = b.path("src/config/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("config"), module_config) catch @panic("OOM");

    const module_consensus_types = b.createModule(.{
        .root_source_file = b.path("src/consensus_types/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("consensus_types"), module_consensus_types) catch @panic("OOM");

    const module_params = b.createModule(.{
        .root_source_file = b.path("src/params/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("params"), module_params) catch @panic("OOM");

    const module_state_transition = b.createModule(.{
        .root_source_file = b.path("src/state_transition/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("state_transition"), module_state_transition) catch @panic("OOM");

    const module_download_spec_tests = b.createModule(.{
        .root_source_file = b.path("test/spec/download_spec_tests.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("download_spec_tests"), module_download_spec_tests) catch @panic("OOM");

    const exe_download_spec_tests = b.addExecutable(.{
        .name = "download_spec_tests",
        .root_module = module_download_spec_tests,
    });

    const install_exe_download_spec_tests = b.addInstallArtifact(exe_download_spec_tests, .{});

    const tls_install_exe_download_spec_tests = b.step("build-exe:download_spec_tests", "Install the download_spec_tests executable");
    tls_install_exe_download_spec_tests.dependOn(&install_exe_download_spec_tests.step);
    b.getInstallStep().dependOn(&install_exe_download_spec_tests.step);

    const run_exe_download_spec_tests = b.addRunArtifact(exe_download_spec_tests);
    if (b.args) |args| run_exe_download_spec_tests.addArgs(args);
    const tls_run_exe_download_spec_tests = b.step("run:download_spec_tests", "Run the download_spec_tests executable");
    tls_run_exe_download_spec_tests.dependOn(&run_exe_download_spec_tests.step);

    const module_write_spec_tests = b.createModule(.{
        .root_source_file = b.path("test/spec/write_spec_tests.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("write_spec_tests"), module_write_spec_tests) catch @panic("OOM");

    const exe_write_spec_tests = b.addExecutable(.{
        .name = "write_spec_tests",
        .root_module = module_write_spec_tests,
    });

    const install_exe_write_spec_tests = b.addInstallArtifact(exe_write_spec_tests, .{});

    const tls_install_exe_write_spec_tests = b.step("build-exe:write_spec_tests", "Install the write_spec_tests executable");
    tls_install_exe_write_spec_tests.dependOn(&install_exe_write_spec_tests.step);
    b.getInstallStep().dependOn(&install_exe_write_spec_tests.step);

    const run_exe_write_spec_tests = b.addRunArtifact(exe_write_spec_tests);
    if (b.args) |args| run_exe_write_spec_tests.addArgs(args);
    const tls_run_exe_write_spec_tests = b.step("run:write_spec_tests", "Run the write_spec_tests executable");
    tls_run_exe_write_spec_tests.dependOn(&run_exe_write_spec_tests.step);

    const module_state_transition_utils = b.createModule(.{
        .root_source_file = b.path("src/lib_state_transition_utils.zig"),
        .target = target,
        .optimize = optimize,
        .link_libc = true,
    });
    b.modules.put(b.dupe("state_transition_utils"), module_state_transition_utils) catch @panic("OOM");

    const lib_state_transition_utils = b.addLibrary(.{
        .name = "state_transition_utils",
        .root_module = module_state_transition_utils,
        .linkage = .dynamic,
    });

    const install_lib_state_transition_utils = b.addInstallArtifact(lib_state_transition_utils, .{});

    const tls_install_lib_state_transition_utils = b.step("build-lib:state_transition_utils", "Install the state_transition_utils library");
    tls_install_lib_state_transition_utils.dependOn(&install_lib_state_transition_utils.step);
    b.getInstallStep().dependOn(&install_lib_state_transition_utils.step);

    const tls_run_test = b.step("test", "Run all tests");

    const test_hex = b.addTest(.{
        .name = "hex",
        .root_module = module_hex,
        .filters = &[_][]const u8{},
    });
    const install_test_hex = b.addInstallArtifact(test_hex, .{});
    const tls_install_test_hex = b.step("build-test:hex", "Install the hex test");
    tls_install_test_hex.dependOn(&install_test_hex.step);

    const run_test_hex = b.addRunArtifact(test_hex);
    const tls_run_test_hex = b.step("test:hex", "Run the hex test");
    tls_run_test_hex.dependOn(&run_test_hex.step);
    tls_run_test.dependOn(&run_test_hex.step);

    const test_config = b.addTest(.{
        .name = "config",
        .root_module = module_config,
        .filters = &[_][]const u8{},
    });
    const install_test_config = b.addInstallArtifact(test_config, .{});
    const tls_install_test_config = b.step("build-test:config", "Install the config test");
    tls_install_test_config.dependOn(&install_test_config.step);

    const run_test_config = b.addRunArtifact(test_config);
    const tls_run_test_config = b.step("test:config", "Run the config test");
    tls_run_test_config.dependOn(&run_test_config.step);
    tls_run_test.dependOn(&run_test_config.step);

    const test_consensus_types = b.addTest(.{
        .name = "consensus_types",
        .root_module = module_consensus_types,
        .filters = &[_][]const u8{},
    });
    const install_test_consensus_types = b.addInstallArtifact(test_consensus_types, .{});
    const tls_install_test_consensus_types = b.step("build-test:consensus_types", "Install the consensus_types test");
    tls_install_test_consensus_types.dependOn(&install_test_consensus_types.step);

    const run_test_consensus_types = b.addRunArtifact(test_consensus_types);
    const tls_run_test_consensus_types = b.step("test:consensus_types", "Run the consensus_types test");
    tls_run_test_consensus_types.dependOn(&run_test_consensus_types.step);
    tls_run_test.dependOn(&run_test_consensus_types.step);

    const test_params = b.addTest(.{
        .name = "params",
        .root_module = module_params,
        .filters = &[_][]const u8{},
    });
    const install_test_params = b.addInstallArtifact(test_params, .{});
    const tls_install_test_params = b.step("build-test:params", "Install the params test");
    tls_install_test_params.dependOn(&install_test_params.step);

    const run_test_params = b.addRunArtifact(test_params);
    const tls_run_test_params = b.step("test:params", "Run the params test");
    tls_run_test_params.dependOn(&run_test_params.step);
    tls_run_test.dependOn(&run_test_params.step);

    const test_state_transition = b.addTest(.{
        .name = "state_transition",
        .root_module = module_state_transition,
        .filters = &[_][]const u8{},
    });
    const install_test_state_transition = b.addInstallArtifact(test_state_transition, .{});
    const tls_install_test_state_transition = b.step("build-test:state_transition", "Install the state_transition test");
    tls_install_test_state_transition.dependOn(&install_test_state_transition.step);

    const run_test_state_transition = b.addRunArtifact(test_state_transition);
    const tls_run_test_state_transition = b.step("test:state_transition", "Run the state_transition test");
    tls_run_test_state_transition.dependOn(&run_test_state_transition.step);
    tls_run_test.dependOn(&run_test_state_transition.step);

    const test_download_spec_tests = b.addTest(.{
        .name = "download_spec_tests",
        .root_module = module_download_spec_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_download_spec_tests = b.addInstallArtifact(test_download_spec_tests, .{});
    const tls_install_test_download_spec_tests = b.step("build-test:download_spec_tests", "Install the download_spec_tests test");
    tls_install_test_download_spec_tests.dependOn(&install_test_download_spec_tests.step);

    const run_test_download_spec_tests = b.addRunArtifact(test_download_spec_tests);
    const tls_run_test_download_spec_tests = b.step("test:download_spec_tests", "Run the download_spec_tests test");
    tls_run_test_download_spec_tests.dependOn(&run_test_download_spec_tests.step);
    tls_run_test.dependOn(&run_test_download_spec_tests.step);

    const test_write_spec_tests = b.addTest(.{
        .name = "write_spec_tests",
        .root_module = module_write_spec_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_write_spec_tests = b.addInstallArtifact(test_write_spec_tests, .{});
    const tls_install_test_write_spec_tests = b.step("build-test:write_spec_tests", "Install the write_spec_tests test");
    tls_install_test_write_spec_tests.dependOn(&install_test_write_spec_tests.step);

    const run_test_write_spec_tests = b.addRunArtifact(test_write_spec_tests);
    const tls_run_test_write_spec_tests = b.step("test:write_spec_tests", "Run the write_spec_tests test");
    tls_run_test_write_spec_tests.dependOn(&run_test_write_spec_tests.step);
    tls_run_test.dependOn(&run_test_write_spec_tests.step);

    const test_state_transition_utils = b.addTest(.{
        .name = "state_transition_utils",
        .root_module = module_state_transition_utils,
        .filters = &[_][]const u8{},
    });
    const install_test_state_transition_utils = b.addInstallArtifact(test_state_transition_utils, .{});
    const tls_install_test_state_transition_utils = b.step("build-test:state_transition_utils", "Install the state_transition_utils test");
    tls_install_test_state_transition_utils.dependOn(&install_test_state_transition_utils.step);

    const run_test_state_transition_utils = b.addRunArtifact(test_state_transition_utils);
    const tls_run_test_state_transition_utils = b.step("test:state_transition_utils", "Run the state_transition_utils test");
    tls_run_test_state_transition_utils.dependOn(&run_test_state_transition_utils.step);
    tls_run_test.dependOn(&run_test_state_transition_utils.step);

    const module_unit = b.createModule(.{
        .root_source_file = b.path("src/state_transition/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("unit"), module_unit) catch @panic("OOM");

    const test_unit = b.addTest(.{
        .name = "unit",
        .root_module = module_unit,
        .filters = &[_][]const u8{},
    });
    const install_test_unit = b.addInstallArtifact(test_unit, .{});
    const tls_install_test_unit = b.step("build-test:unit", "Install the unit test");
    tls_install_test_unit.dependOn(&install_test_unit.step);

    const run_test_unit = b.addRunArtifact(test_unit);
    const tls_run_test_unit = b.step("test:unit", "Run the unit test");
    tls_run_test_unit.dependOn(&run_test_unit.step);
    tls_run_test.dependOn(&run_test_unit.step);

    const module_int = b.createModule(.{
        .root_source_file = b.path("test/int/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("int"), module_int) catch @panic("OOM");

    const test_int = b.addTest(.{
        .name = "int",
        .root_module = module_int,
        .filters = &[_][]const u8{},
    });
    const install_test_int = b.addInstallArtifact(test_int, .{});
    const tls_install_test_int = b.step("build-test:int", "Install the int test");
    tls_install_test_int.dependOn(&install_test_int.step);

    const run_test_int = b.addRunArtifact(test_int);
    const tls_run_test_int = b.step("test:int", "Run the int test");
    tls_run_test_int.dependOn(&run_test_int.step);
    tls_run_test.dependOn(&run_test_int.step);

    const module_spec_tests = b.createModule(.{
        .root_source_file = b.path("test/spec/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("spec_tests"), module_spec_tests) catch @panic("OOM");

    const test_spec_tests = b.addTest(.{
        .name = "spec_tests",
        .root_module = module_spec_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_spec_tests = b.addInstallArtifact(test_spec_tests, .{});
    const tls_install_test_spec_tests = b.step("build-test:spec_tests", "Install the spec_tests test");
    tls_install_test_spec_tests.dependOn(&install_test_spec_tests.step);

    const run_test_spec_tests = b.addRunArtifact(test_spec_tests);
    const tls_run_test_spec_tests = b.step("test:spec_tests", "Run the spec_tests test");
    tls_run_test_spec_tests.dependOn(&run_test_spec_tests.step);
    tls_run_test.dependOn(&run_test_spec_tests.step);

    module_config.addImport("build_options", options_module_build_options);
    module_config.addImport("params", module_params);
    module_config.addImport("consensus_types", module_consensus_types);
    module_config.addImport("hex", module_hex);

    module_consensus_types.addImport("build_options", options_module_build_options);
    module_consensus_types.addImport("ssz", dep_ssz.module("ssz"));

    module_params.addImport("build_options", options_module_build_options);
    module_params.addImport("consensus_types", module_consensus_types);

    module_state_transition.addImport("build_options", options_module_build_options);
    module_state_transition.addImport("ssz", dep_ssz.module("ssz"));
    module_state_transition.addImport("config", module_config);
    module_state_transition.addImport("consensus_types", module_consensus_types);
    module_state_transition.addImport("blst_min_pk", dep_blst_z.module("blst_min_pk"));
    module_state_transition.addImport("params", module_params);

    module_download_spec_tests.addImport("spec_test_options", options_module_spec_test_options);

    module_write_spec_tests.addImport("spec_test_options", options_module_spec_test_options);
    module_write_spec_tests.addImport("params", module_params);
    module_write_spec_tests.addImport("consensus_types", module_consensus_types);
    module_write_spec_tests.addImport("state_transition", module_state_transition);

    module_unit.addImport("build_options", options_module_build_options);
    module_unit.addImport("ssz", dep_ssz.module("ssz"));
    module_unit.addImport("state_transition", module_state_transition);
    module_unit.addImport("config", module_config);
    module_unit.addImport("params", module_params);
    module_unit.addImport("consensus_types", module_consensus_types);
    module_unit.addImport("blst_min_pk", dep_blst_z.module("blst_min_pk"));

    module_int.addImport("build_options", options_module_build_options);
    module_int.addImport("ssz", dep_ssz.module("ssz"));
    module_int.addImport("state_transition", module_state_transition);
    module_int.addImport("config", module_config);
    module_int.addImport("consensus_types", module_consensus_types);

    module_spec_tests.addImport("consensus_types", module_consensus_types);
    module_spec_tests.addImport("params", module_params);
    module_spec_tests.addImport("snappy", dep_snappy.module("snappy"));
    module_spec_tests.addImport("state_transition", module_state_transition);
}
