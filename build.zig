// This file is generated by zbuild. Do not edit manually.

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const module_main = b.createModule(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("main"), module_main) catch @panic("OOM");

    const exe_main = b.addExecutable(.{
        .name = "main",
        .root_module = module_main,
    });

    const install_exe_main = b.addInstallArtifact(exe_main, .{});

    const tls_install_exe_main = b.step("build-exe:main", "Install the main executable");
    tls_install_exe_main.dependOn(&install_exe_main.step);
    b.getInstallStep().dependOn(&install_exe_main.step);

    const run_exe_main = b.addRunArtifact(exe_main);
    if (b.args) |args| run_exe_main.addArgs(args);
    const tls_run_exe_main = b.step("run:main", "Run the main executable");
    tls_run_exe_main.dependOn(&run_exe_main.step);

    const module_state_transition = b.createModule(.{
        .root_source_file = b.path("src/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("state_transition"), module_state_transition) catch @panic("OOM");

    const lib_state_transition = b.addLibrary(.{
        .name = "state_transition",
        .root_module = module_state_transition,
        .linkage = .static,
    });

    const install_lib_state_transition = b.addInstallArtifact(lib_state_transition, .{});

    const tls_install_lib_state_transition = b.step("build-lib:state_transition", "Install the state_transition library");
    tls_install_lib_state_transition.dependOn(&install_lib_state_transition.step);
    b.getInstallStep().dependOn(&install_lib_state_transition.step);

    const module_state_transition_utils = b.createModule(.{
        .root_source_file = b.path("src/root_c_abi.zig"),
        .target = target,
        .optimize = optimize,
        .link_libc = true,
    });
    b.modules.put(b.dupe("state_transition_utils"), module_state_transition_utils) catch @panic("OOM");

    const lib_state_transition_utils = b.addLibrary(.{
        .name = "state_transition_utils",
        .root_module = module_state_transition_utils,
        .linkage = .dynamic,
    });

    const install_lib_state_transition_utils = b.addInstallArtifact(lib_state_transition_utils, .{});

    const tls_install_lib_state_transition_utils = b.step("build-lib:state_transition_utils", "Install the state_transition_utils library");
    tls_install_lib_state_transition_utils.dependOn(&install_lib_state_transition_utils.step);
    b.getInstallStep().dependOn(&install_lib_state_transition_utils.step);

    const tls_run_test = b.step("test", "Run all tests");

    const test_main = b.addTest(.{
        .name = "main",
        .root_module = module_main,
        .filters = &[_][]const u8{},
    });
    const install_test_main = b.addInstallArtifact(test_main, .{});
    const tls_install_test_main = b.step("build-test:main", "Install the main test");
    tls_install_test_main.dependOn(&install_test_main.step);

    const run_test_main = b.addRunArtifact(test_main);
    const tls_run_test_main = b.step("test:main", "Run the main test");
    tls_run_test_main.dependOn(&run_test_main.step);
    tls_run_test.dependOn(&run_test_main.step);

    const test_state_transition = b.addTest(.{
        .name = "state_transition",
        .root_module = module_state_transition,
        .filters = &[_][]const u8{},
    });
    const install_test_state_transition = b.addInstallArtifact(test_state_transition, .{});
    const tls_install_test_state_transition = b.step("build-test:state_transition", "Install the state_transition test");
    tls_install_test_state_transition.dependOn(&install_test_state_transition.step);

    const run_test_state_transition = b.addRunArtifact(test_state_transition);
    const tls_run_test_state_transition = b.step("test:state_transition", "Run the state_transition test");
    tls_run_test_state_transition.dependOn(&run_test_state_transition.step);
    tls_run_test.dependOn(&run_test_state_transition.step);

    const test_state_transition_utils = b.addTest(.{
        .name = "state_transition_utils",
        .root_module = module_state_transition_utils,
        .filters = &[_][]const u8{},
    });
    const install_test_state_transition_utils = b.addInstallArtifact(test_state_transition_utils, .{});
    const tls_install_test_state_transition_utils = b.step("build-test:state_transition_utils", "Install the state_transition_utils test");
    tls_install_test_state_transition_utils.dependOn(&install_test_state_transition_utils.step);

    const run_test_state_transition_utils = b.addRunArtifact(test_state_transition_utils);
    const tls_run_test_state_transition_utils = b.step("test:state_transition_utils", "Run the state_transition_utils test");
    tls_run_test_state_transition_utils.dependOn(&run_test_state_transition_utils.step);
    tls_run_test.dependOn(&run_test_state_transition_utils.step);

    const module_shared_lib_unit_tests = b.createModule(.{
        .root_source_file = b.path("src/root_c_abi.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("shared_lib_unit_tests"), module_shared_lib_unit_tests) catch @panic("OOM");

    const test_shared_lib_unit_tests = b.addTest(.{
        .name = "shared_lib_unit_tests",
        .root_module = module_shared_lib_unit_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_shared_lib_unit_tests = b.addInstallArtifact(test_shared_lib_unit_tests, .{});
    const tls_install_test_shared_lib_unit_tests = b.step("build-test:shared_lib_unit_tests", "Install the shared_lib_unit_tests test");
    tls_install_test_shared_lib_unit_tests.dependOn(&install_test_shared_lib_unit_tests.step);

    const run_test_shared_lib_unit_tests = b.addRunArtifact(test_shared_lib_unit_tests);
    const tls_run_test_shared_lib_unit_tests = b.step("test:shared_lib_unit_tests", "Run the shared_lib_unit_tests test");
    tls_run_test_shared_lib_unit_tests.dependOn(&run_test_shared_lib_unit_tests.step);
    tls_run_test.dependOn(&run_test_shared_lib_unit_tests.step);

    const module_lib_unit_tests = b.createModule(.{
        .root_source_file = b.path("src/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("lib_unit_tests"), module_lib_unit_tests) catch @panic("OOM");

    const test_lib_unit_tests = b.addTest(.{
        .name = "lib_unit_tests",
        .root_module = module_lib_unit_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_lib_unit_tests = b.addInstallArtifact(test_lib_unit_tests, .{});
    const tls_install_test_lib_unit_tests = b.step("build-test:lib_unit_tests", "Install the lib_unit_tests test");
    tls_install_test_lib_unit_tests.dependOn(&install_test_lib_unit_tests.step);

    const run_test_lib_unit_tests = b.addRunArtifact(test_lib_unit_tests);
    const tls_run_test_lib_unit_tests = b.step("test:lib_unit_tests", "Run the lib_unit_tests test");
    tls_run_test_lib_unit_tests.dependOn(&run_test_lib_unit_tests.step);
    tls_run_test.dependOn(&run_test_lib_unit_tests.step);

    const module_exe_unit_tests = b.createModule(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("exe_unit_tests"), module_exe_unit_tests) catch @panic("OOM");

    const test_exe_unit_tests = b.addTest(.{
        .name = "exe_unit_tests",
        .root_module = module_exe_unit_tests,
        .filters = &[_][]const u8{},
    });
    const install_test_exe_unit_tests = b.addInstallArtifact(test_exe_unit_tests, .{});
    const tls_install_test_exe_unit_tests = b.step("build-test:exe_unit_tests", "Install the exe_unit_tests test");
    tls_install_test_exe_unit_tests.dependOn(&install_test_exe_unit_tests.step);

    const run_test_exe_unit_tests = b.addRunArtifact(test_exe_unit_tests);
    const tls_run_test_exe_unit_tests = b.step("test:exe_unit_tests", "Run the exe_unit_tests test");
    tls_run_test_exe_unit_tests.dependOn(&run_test_exe_unit_tests.step);
    tls_run_test.dependOn(&run_test_exe_unit_tests.step);
}
